__d(function(g,r,i,a,m,e,d){var o=r(d[0]);Object.defineProperty(e,"__esModule",{value:!0}),e.DeletionService=void 0;var n=o(r(d[1])),t=r(d[2]),s=r(d[3]),l=r(d[4]),c=r(d[5]),w=r(d[6]),u=r(d[7]);e.DeletionService=class{static async deleteLoanAndCleanup(o,n,l={}){const{showConfirmation:y=!0,onProgress:f}=l;try{if(y&&n){if(!await n(l.customConfirmMessage||'Deleting this loan will also remove all associated payments and reminders. This action cannot be undone. Do you want to continue?'))return}f?.('Finding associated payments...');const h=(0,u.query)((0,u.collection)(w.db,'payments'),(0,u.where)('loanId','==',o)),D=await(0,u.getDocs)(h);f?.(`Deleting ${D.docs.length} payments...`);for(const o of D.docs)await s.PaymentService.deletePayment(o.id);f?.('Finding associated reminders...');const p=(0,u.query)((0,u.collection)(w.db,'reminders'),(0,u.where)('loanId','==',o)),v=await(0,u.getDocs)(p);f?.(`Deleting ${v.docs.length} reminders...`);for(const o of v.docs)await c.ReminderFirestoreService.deleteReminder(o.id);f?.('Deleting loan...'),await t.LoanService.deleteLoan(o),f?.('Deletion completed successfully')}catch(o){throw console.error('Error in deleteLoanAndCleanup:',o),new Error(`Failed to delete loan: ${o instanceof Error?o.message:'Unknown error'}`)}}static async deleteBorrowerAndCleanup(o,n,y={}){const{showConfirmation:f=!0,onProgress:h}=y;try{if(f&&n){if(!await n(y.customConfirmMessage||'Deleting this borrower will remove them from all loans and delete all their payment records. This action cannot be undone. Do you want to continue?'))return}h?.('Finding associated loans...');const D=(await t.LoanService.getLoans()).filter(n=>n.borrowerIds&&n.borrowerIds.includes(o));h?.(`Updating ${D.length} loans...`);for(const n of D){let s={borrowerIds:n.borrowerIds.filter(n=>n!==o)};if(n.emiAmounts&&void 0!==n.emiAmounts[o]){const t=Object.assign({},n.emiAmounts);delete t[o],s.emiAmounts=t}await t.LoanService.updateLoan(n.id,s)}h?.('Finding associated payments...');const p=(0,u.query)((0,u.collection)(w.db,'payments'),(0,u.where)('borrowerId','==',o)),v=await(0,u.getDocs)(p);h?.(`Deleting ${v.docs.length} payments...`);for(const o of v.docs)await s.PaymentService.deletePayment(o.id);h?.('Finding associated reminders...');const b=(0,u.query)((0,u.collection)(w.db,'reminders'),(0,u.where)('userId','==',o)),P=await(0,u.getDocs)(b);h?.(`Deleting ${P.docs.length} reminders...`);for(const o of P.docs)await c.ReminderFirestoreService.deleteReminder(o.id);h?.('Deleting borrower...'),await l.BorrowerService.deleteBorrower(o),h?.('Deletion completed successfully')}catch(o){throw console.error('Error in deleteBorrowerAndCleanup:',o),new Error(`Failed to delete borrower: ${o instanceof Error?o.message:'Unknown error'}`)}}static async deletePaymentSafely(o,n,t={}){const{showConfirmation:l=!0,onProgress:c}=t;try{if(l&&n){if(!await n(t.customConfirmMessage||'Are you sure you want to delete this payment? This action cannot be undone.'))return}c?.('Deleting payment...'),await s.PaymentService.deletePayment(o),c?.('Payment deleted successfully')}catch(o){throw console.error('Error in deletePaymentSafely:',o),new Error(`Failed to delete payment: ${o instanceof Error?o.message:'Unknown error'}`)}}static async showConfirmationDialog(o,t,s="Delete",l="Cancel"){return new Promise(c=>{n.default.alert(o,t,[{text:l,style:'cancel',onPress:()=>c(!1)},{text:s,style:'destructive',onPress:()=>c(!0)}],{cancelable:!1})})}static showProgress(o){console.log(`[Deletion Progress]: ${o}`)}}},593,[1,177,543,545,546,584,189,202]);